// Generated by gencpp from file utils/Telemetry.msg
// DO NOT EDIT!


#ifndef UTILS_MESSAGE_TELEMETRY_H
#define UTILS_MESSAGE_TELEMETRY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace utils
{
template <class ContainerAllocator>
struct Telemetry_
{
  typedef Telemetry_<ContainerAllocator> Type;

  Telemetry_()
    : x(0.0)
    , y(0.0)
    , psi(0.0)
    , speed(0.0)
    , steering_angle(0.0)
    , throttle(0.0)
    , ptsx()
    , ptsy()  {
    }
  Telemetry_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , psi(0.0)
    , speed(0.0)
    , steering_angle(0.0)
    , throttle(0.0)
    , ptsx(_alloc)
    , ptsy(_alloc)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _psi_type;
  _psi_type psi;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _steering_angle_type;
  _steering_angle_type steering_angle;

   typedef double _throttle_type;
  _throttle_type throttle;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _ptsx_type;
  _ptsx_type ptsx;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _ptsy_type;
  _ptsy_type ptsy;





  typedef boost::shared_ptr< ::utils::Telemetry_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::utils::Telemetry_<ContainerAllocator> const> ConstPtr;

}; // struct Telemetry_

typedef ::utils::Telemetry_<std::allocator<void> > Telemetry;

typedef boost::shared_ptr< ::utils::Telemetry > TelemetryPtr;
typedef boost::shared_ptr< ::utils::Telemetry const> TelemetryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::utils::Telemetry_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::utils::Telemetry_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::utils::Telemetry_<ContainerAllocator1> & lhs, const ::utils::Telemetry_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.psi == rhs.psi &&
    lhs.speed == rhs.speed &&
    lhs.steering_angle == rhs.steering_angle &&
    lhs.throttle == rhs.throttle &&
    lhs.ptsx == rhs.ptsx &&
    lhs.ptsy == rhs.ptsy;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::utils::Telemetry_<ContainerAllocator1> & lhs, const ::utils::Telemetry_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace utils

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::utils::Telemetry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::utils::Telemetry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::Telemetry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::utils::Telemetry_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::Telemetry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::utils::Telemetry_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::utils::Telemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ce9a5032ca039f8f17f2d0a4069e969f";
  }

  static const char* value(const ::utils::Telemetry_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xce9a5032ca039f8fULL;
  static const uint64_t static_value2 = 0x17f2d0a4069e969fULL;
};

template<class ContainerAllocator>
struct DataType< ::utils::Telemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "utils/Telemetry";
  }

  static const char* value(const ::utils::Telemetry_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::utils::Telemetry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n"
"float64 y\n"
"\n"
"float64 psi\n"
"\n"
"# Speed of the vehicle in mph\n"
"float64 speed\n"
"\n"
"# Current steering angle of the vehicle in radians\n"
"float64 steering_angle\n"
"\n"
"# Current throttle value of the vehicle\n"
"float64 throttle\n"
"\n"
"# The waypoints representing the desired path, in the map coordinate system\n"
"float64[] ptsx\n"
"float64[] ptsy\n"
;
  }

  static const char* value(const ::utils::Telemetry_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::utils::Telemetry_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.psi);
      stream.next(m.speed);
      stream.next(m.steering_angle);
      stream.next(m.throttle);
      stream.next(m.ptsx);
      stream.next(m.ptsy);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Telemetry_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::utils::Telemetry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::utils::Telemetry_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "psi: ";
    Printer<double>::stream(s, indent + "  ", v.psi);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "steering_angle: ";
    Printer<double>::stream(s, indent + "  ", v.steering_angle);
    s << indent << "throttle: ";
    Printer<double>::stream(s, indent + "  ", v.throttle);
    s << indent << "ptsx[]" << std::endl;
    for (size_t i = 0; i < v.ptsx.size(); ++i)
    {
      s << indent << "  ptsx[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ptsx[i]);
    }
    s << indent << "ptsy[]" << std::endl;
    for (size_t i = 0; i < v.ptsy.size(); ++i)
    {
      s << indent << "  ptsy[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.ptsy[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // UTILS_MESSAGE_TELEMETRY_H
